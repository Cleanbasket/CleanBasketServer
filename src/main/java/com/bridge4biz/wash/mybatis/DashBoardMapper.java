package com.bridge4biz.wash.mybatis;

import java.util.ArrayList;

import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;

import com.bridge4biz.wash.service.DashBoardData;
import com.bridge4biz.wash.service.MapData;

public interface DashBoardMapper {
	@Select("SELECT a.date, a.data, b.data as data2 FROM (SELECT DATE_FORMAT(pickup_date, '%Y-%m-%d') AS date, COUNT(*) as data FROM orders GROUP BY DATE_FORMAT(pickup_date, '%Y-%m-%d')) a LEFT JOIN (SELECT DATE_FORMAT(pickup_date, '%Y-%m-%d') AS date, COUNT(*) as data FROM orders a RIGHT JOIN (SELECT uid, COUNT(*) as count FROM orders GROUP BY uid HAVING COUNT(*) = 1) b ON a.uid = b.uid GROUP BY DATE_FORMAT(pickup_date, '%Y-%m-%d')) b ON a.date = b.date ORDER BY DATE_FORMAT(a.date, '%Y-%m-%d') DESC LIMIT #{limit};")
	ArrayList<DashBoardData> getDailyPickUp(@Param("limit") int limit);
	
	@Select("SELECT DATE_FORMAT(a.pickup_date, '%Y-%m-%d') as date, a.data, b.data as data2 FROM (SELECT pickup_date, CONCAT(YEAR(pickup_date), '/', WEEK(pickup_date)) AS date, COUNT(*) as data FROM orders GROUP BY CONCAT(YEAR(pickup_date), '/', WEEK(pickup_date))) a LEFT JOIN (SELECT a.pickup_date, CONCAT(YEAR(pickup_date), '/', WEEK(pickup_date)) AS date, COUNT(*) as data FROM orders a RIGHT JOIN (SELECT uid, COUNT(*) as count FROM orders GROUP BY uid HAVING COUNT(*) = 1) b ON a.uid = b.uid GROUP BY CONCAT(YEAR(pickup_date), '/', WEEK(pickup_date))) b ON a.date = b.date ORDER BY date DESC LIMIT #{limit};")
	ArrayList<DashBoardData> getWeeklyPickup(@Param("limit") int limit);
	
	@Select("SELECT a.date, a.data, b.data as data2 FROM (SELECT DATE_FORMAT(pickup_date, '%Y-%m') AS date, COUNT(*) as data FROM orders GROUP BY DATE_FORMAT(pickup_date, '%Y-%m')) a LEFT JOIN (SELECT DATE_FORMAT(pickup_date, '%Y-%m') AS date, COUNT(*) as data FROM orders a RIGHT JOIN (SELECT uid, COUNT(*) as count FROM orders GROUP BY uid HAVING COUNT(*) = 1) b ON a.uid = b.uid GROUP BY DATE_FORMAT(pickup_date, '%Y-%m')) b ON a.date = b.date ORDER BY date DESC LIMIT #{limit};")
	ArrayList<DashBoardData> getMonthlyPickup(@Param("limit") int limit);

	@Select("SELECT sum(gangnam) as gangnam, sum(seocho) as seocho, sum(gwanak) as gwanak, sum(dongjak) as dongjak, sum(yeongdeungpo) as yeongdeungpo, sum(mapo) as mapo, sum(seodaemun) as seodaemun, sum(seongdong) as seongdong, sum(yongsan) as yongsan, sum(jung) as jung, sum(seongnam) as seongnam FROM ( SELECT count(oid) AS gangnam, 0 AS seocho, 0 AS gwanak, 0 AS dongjak, 0 AS yeongdeungpo, 0 AS mapo, 0 AS seodaemun, 0 AS seongdong, 0 AS yongsan, 0 AS jung, 0 AS seongnam FROM orders WHERE address LIKE '%강남구%' and DATE(pickup_date) < CAST(#{date} AS DATE) GROUP BY DATE(pickup_date) DESC LIMIT #{limit} ) gangnam UNION SELECT sum(gangnam) as gangnam, sum(seocho) as seocho, sum(gwanak) as gwanak, sum(dongjak) as dongjak, sum(yeongdeungpo) as yeongdeungpo, sum(mapo) as mapo, sum(seodaemun) as seodaemun, sum(seongdong) as seongdong, sum(yongsan) as yongsan, sum(jung) as jung, sum(seongnam) as seongnam FROM ( SELECT 0 AS gangnam, count(oid) AS seocho, 0 AS gwanak, 0 AS dongjak, 0 AS yeongdeungpo, 0 AS mapo, 0 AS seodaemun, 0 AS seongdong, 0 AS yongsan, 0 AS jung, 0 AS seongnam FROM orders WHERE address LIKE '%서초구%' and DATE(pickup_date) < CAST(#{date} AS DATE) GROUP BY DATE(pickup_date) DESC LIMIT #{limit} ) seocho UNION SELECT sum(gangnam) as gangnam, sum(seocho) as seocho, sum(gwanak) as gwanak, sum(dongjak) as dongjak, sum(yeongdeungpo) as yeongdeungpo, sum(mapo) as mapo, sum(seodaemun) as seodaemun, sum(seongdong) as seongdong, sum(yongsan) as yongsan, sum(jung) as jung, sum(seongnam) as seongnam FROM ( SELECT 0 AS gangnam, 0 AS seocho, count(oid) AS gwanak, 0 AS dongjak, 0 AS yeongdeungpo, 0 AS mapo, 0 AS seodaemun, 0 AS seongdong, 0 AS yongsan, 0 AS jung, 0 AS seongnam FROM orders WHERE address LIKE '%관악구%' and DATE(pickup_date) < CAST(#{date} AS DATE) GROUP BY DATE(pickup_date) DESC LIMIT #{limit} ) gwanak UNION SELECT sum(gangnam) as gangnam, sum(seocho) as seocho, sum(gwanak) as gwanak, sum(dongjak) as dongjak, sum(yeongdeungpo) as yeongdeungpo, sum(mapo) as mapo, sum(seodaemun) as seodaemun, sum(seongdong) as seongdong, sum(yongsan) as yongsan, sum(jung) as jung, sum(seongnam) as seongnam FROM ( SELECT 0 AS gangnam, 0 AS seocho, 0 AS gwanak, count(oid) AS dongjak, 0 AS yeongdeungpo, 0 AS mapo, 0 AS seodaemun, 0 AS seongdong, 0 AS yongsan, 0 AS jung, 0 AS seongnam FROM orders WHERE address LIKE '%동작구%' and DATE(pickup_date) < CAST(#{date} AS DATE) GROUP BY DATE(pickup_date) DESC LIMIT #{limit} ) dongjak UNION SELECT sum(gangnam) as gangnam, sum(seocho) as seocho, sum(gwanak) as gwanak, sum(dongjak) as dongjak, sum(yeongdeungpo) as yeongdeungpo, sum(mapo) as mapo, sum(seodaemun) as seodaemun, sum(seongdong) as seongdong, sum(yongsan) as yongsan, sum(jung) as jung, sum(seongnam) as seongnam FROM ( SELECT 0 AS gangnam, 0 AS seocho, 0 AS gwanak, 0 AS dongjak, count(oid) AS yeongdeungpo, 0 AS mapo, 0 AS seodaemun, 0 AS seongdong, 0 AS yongsan, 0 AS jung, 0 AS seongnam FROM orders WHERE address LIKE '%영등포구%' and DATE(pickup_date) < CAST(#{date} AS DATE) GROUP BY DATE(pickup_date) DESC LIMIT #{limit} ) yeongdeungpo UNION SELECT sum(gangnam) as gangnam, sum(seocho) as seocho, sum(gwanak) as gwanak, sum(dongjak) as dongjak, sum(yeongdeungpo) as yeongdeungpo, sum(mapo) as mapo, sum(seodaemun) as seodaemun, sum(seongdong) as seongdong, sum(yongsan) as yongsan, sum(jung) as jung, sum(seongnam) as seongnam FROM ( SELECT 0 AS gangnam, 0 AS seocho, 0 AS gwanak, 0 AS dongjak, 0 AS yeongdeungpo, count(oid) AS mapo, 0 AS seodaemun, 0 AS seongdong, 0 AS yongsan, 0 AS jung, 0 AS seongnam FROM orders WHERE address LIKE '%마포구%' and DATE(pickup_date) < CAST(#{date} AS DATE) GROUP BY DATE(pickup_date) DESC LIMIT #{limit} ) mapo UNION SELECT sum(gangnam) as gangnam, sum(seocho) as seocho, sum(gwanak) as gwanak, sum(dongjak) as dongjak, sum(yeongdeungpo) as yeongdeungpo, sum(mapo) as mapo, sum(seodaemun) as seodaemun, sum(seongdong) as seongdong, sum(yongsan) as yongsan, sum(jung) as jung, sum(seongnam) as seongnam FROM ( SELECT 0 AS gangnam, 0 AS seocho, 0 AS gwanak, 0 AS dongjak, 0 AS yeongdeungpo, 0 AS mapo, count(oid) AS seodaemun, 0 AS seongdong, 0 AS yongsan, 0 AS jung, 0 AS seongnam FROM orders WHERE address LIKE '%서대문구%' and DATE(pickup_date) < CAST(#{date} AS DATE) GROUP BY DATE(pickup_date) DESC LIMIT #{limit} ) seodaemun UNION SELECT sum(gangnam) as gangnam, sum(seocho) as seocho, sum(gwanak) as gwanak, sum(dongjak) as dongjak, sum(yeongdeungpo) as yeongdeungpo, sum(mapo) as mapo, sum(seodaemun) as seodaemun, sum(seongdong) as seongdong, sum(yongsan) as yongsan, sum(jung) as jung, sum(seongnam) as seongnam FROM ( SELECT 0 AS gangnam, 0 AS seocho, 0 AS gwanak, 0 AS dongjak, 0 AS yeongdeungpo, 0 AS mapo, 0 AS seodaemun, count(oid) AS seongdong, 0 AS yongsan, 0 AS jung, 0 AS seongnam FROM orders WHERE address LIKE '%성동구%' and DATE(pickup_date) < CAST(#{date} AS DATE) GROUP BY DATE(pickup_date) DESC LIMIT #{limit} ) seongdong UNION SELECT sum(gangnam) as gangnam, sum(seocho) as seocho, sum(gwanak) as gwanak, sum(dongjak) as dongjak, sum(yeongdeungpo) as yeongdeungpo, sum(mapo) as mapo, sum(seodaemun) as seodaemun, sum(seongdong) as seongdong, sum(yongsan) as yongsan, sum(jung) as jung, sum(seongnam) as seongnam FROM ( SELECT 0 AS gangnam, 0 AS seocho, 0 AS gwanak, 0 AS dongjak, 0 AS yeongdeungpo, 0 AS mapo, 0 AS seodaemun, 0 AS seongdong, count(oid) AS yongsan, 0 AS jung, 0 AS seongnam FROM orders WHERE address LIKE '%용산구%' and DATE(pickup_date) < CAST(#{date} AS DATE) GROUP BY DATE(pickup_date) DESC LIMIT #{limit} ) yongsan UNION SELECT sum(gangnam) as gangnam, sum(seocho) as seocho, sum(gwanak) as gwanak, sum(dongjak) as dongjak, sum(yeongdeungpo) as yeongdeungpo, sum(mapo) as mapo, sum(seodaemun) as seodaemun, sum(seongdong) as seongdong, sum(yongsan) as yongsan, sum(jung) as jung, sum(seongnam) as seongnam FROM ( SELECT 0 AS gangnam, 0 AS seocho, 0 AS gwanak, 0 AS dongjak, 0 AS yeongdeungpo, 0 AS mapo, 0 AS seodaemun, 0 AS seongdong, 0 AS yongsan, count(oid) AS jung, 0 AS seongnam FROM orders WHERE address LIKE '%중구%' and DATE(pickup_date) < CAST(#{date} AS DATE) GROUP BY DATE(pickup_date) DESC LIMIT #{limit} ) jung UNION SELECT sum(gangnam) as gangnam, sum(seocho) as seocho, sum(gwanak) as gwanak, sum(dongjak) as dongjak, sum(yeongdeungpo) as yeongdeungpo, sum(mapo) as mapo, sum(seodaemun) as seodaemun, sum(seongdong) as seongdong, sum(yongsan) as yongsan, sum(jung) as jung, sum(seongnam) as seongnam FROM ( SELECT 0 AS gangnam, 0 AS seocho, 0 AS gwanak, 0 AS dongjak, 0 AS yeongdeungpo, 0 AS mapo, 0 AS seodaemun, 0 AS seongdong, 0 AS yongsan, 0 AS jung, count(oid) AS seongnam FROM orders WHERE address LIKE '%성남시%' and DATE(pickup_date) < CAST(#{date} AS DATE) GROUP BY DATE(pickup_date) DESC LIMIT #{limit} ) seongnam;")
	ArrayList<MapData> getPickupNo(@Param("limit") int limit, @Param("date") String date);
}